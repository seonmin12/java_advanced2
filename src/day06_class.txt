Object 클래스
-boolean equals(Object obj): 객체의 번지를 비교해 결과를 리턴
 객체 동등 비교 시 equals()사용. 동등비교연산자== 사용하지 않음
 객체의 주소값을 비교하고 boolean(true, false) 값을 리턴, 두 주소값이 같으면 true, 아니면 flase 리턴
 매개값이 자동 프로모션됨.

-int hashcode(): 객체의 해시코드 리턴
객체 해시코드란 객체를 식별하는 정수를 의미함.
Object 클래스의 hashcode(): 객체의 메모리 번지를 이용해서 해시코드를 생성한다.
객체마다 다른 정수값을 리턴한다.
hashcode()의 목적은 객체의 주소값을 기반으로 해상해서 고유한 숫자값을 반환한다.
객체가 같은지 같지 않은지를 판별한다.
equals(), hashcod()를 오버라이딩하면 반환 동작이 완전히 달라짐. (ex. id가 같으면 같은 객체)
만일, 객체 자체의 주소값(해시값) 얻어야 하는 상황이라면 : java.util.Objects 에서 identifyHashCode() 메소드 제공

***자바는 두 객체가 동등함을 비교할때, hashcode() + equals() 메소드를 같이 사용하여 검증(식별)한다
hashcode() + equals()

-String toString(): 객체의 문자 정보 리ㅇ턴

-clone 메소드 : 객체를 깊은 복사(deep copy) 할때 사용하는 메소드
//깊은복사: 객체 안에 값들까지 싹다 복사하겠다, 완전히 새로운 인스턴스를 생성
//cloneable interface 를 implements 해서 사용
Object.clone()메소드는 인스턴스 객체의 복제를 위한 메소드
해당 인스턴스를 복제해서 새로운 인스턴스를 생성해 그 참조값을 반환한다.
//새로운 인스턴스를 만들어 서로 다른 객체라 주소값이 달라짐
//clone()은 protected 접근권한을 가져 public 으로 재정의 하여 풀어 놓음.

2. System 클래스
자바의 byte 코드의 실행 주체는
os가 직접 운형하지 않고 JVM 위에서 실행되므로, 운영체제의 모든 기능을 자바 코드로 직접 접근하기 어렵다.
java.lang.System 이용하면 운영체제의 일부 기능을 이용할 수 있다.

System.exit(0); // 프로세스를 강제로 종료

//진행 시간 읽기
System 클래스 1970년 1월 1일 0시부터 시작해서 현재까지 진행된 시간
            currentTimeMills() 1/1000초 단위로 진행된 시간 반환
            nanoTime() 1/1000000000초 단위로 진행된 시간 반환

3. 날짜와 시간 클래스
 자바는 컴퓨터의 날짜와 시간을 읽을 수 있도록 java.util 패키지에서 Date 클래스(날짜 정보를 전달), Calendar(다양한 시간대별로 날짜와 시간) 클래스를 제공
 조작을 위해서는 java.time 패키지에서 LocalDateTime 클래스를 주로 사용함

4. 정규표현식 (Regular Expression)
문자열 데이터 중에서 원하는 조건(패턴)과 일치하는 문자열 부분을 찾아내기 위해 사용하는 표현
미리 정의된 기호와 문자를 이용해서 작성된 문자열

-전화번호, 주민등록번호, 이메일, 비밀번호 등 중요한 데이터를 지정한 형식으로 제대로 입력했는지 검증할때

exampleshinsaegae@gmail.com
([a-zA-Z0-9.+-]+)@[a-zA-Z0-9.+-]+\.[a-zA-Z0-9_+-]

. => 임의의 문자 1개 의미
^ => 시작의미, [^]: 부정의 의미 ^a: a로 시작하는 단어 [^a]: a가 아닌 철자인 문자 1개
$ => $앞의 문자열로 문자가 끝나는가? ex) a$: a로 끝나는 단어인지 아닌지, 아니면 false 입력 불가능
[] => [] 대괄호 안의 문자가 있는지를 확인  ex) [ab][cd]: a, b 중 한문자와 c, 중 한문자만 허용-> ac ad bc bd
[^] => []대괄호 안에 ^문자가 있으면, 해당 문자 제외 ex) [^a-z}: 알파벳 소문자 a부터 z까지를 제외한 모든 문장
- => 사이의 문자 또는 숫자를 의미 ex) [a-z0-9]: 알파벳 소문자 전체, 0-9중  한 문자
| => [a | b] a 또는 b 문자 한문자만 허용
() => 그룹 01(0|1) => 010,011 허용 012(x)
{} => 개수 a{3}b => a가 3번 온 후 b가 온다. aab(x) aaab(O) aaaaab(O)
\b => 공백, tab apple\b : apple뒤에 공백이 있다. apple juice(O), apple.com(X)
\B => \b의 반대 apple.com(O)
\d => 0-9사이의 숫자 [0-9] 같은 의미
\D => \d의 반대 [^0-9] 숫자가 아닌 문자 하나(숫자 제외)
\s => 공백 , 탭
\S => \s의 반대, 공백이 아닌 문자만
\w =>[a-zA-Z_0-9]와 동일: 알파벳 대소문자 + 숫자 + _
\W => \w의 반대 [^a-zA-Z_0-9]
================================================================
정규식 수량 기호
? => 앞의 표현식이 없거나 or 최대 한개만  a1? : 1이 최대 1개만 있거나 아예 없을 수도 있다.
a(O), a1(O), a11(X) a111(X)
* => 앞의 표현식이 없거나 or 있거나(여러개) a1* : 1이 있을 수도 있고 없을 수도 있다.
a(o) a1(o) a11(o) a111(o)
+ => 앞의 표현식이 1개 이상 or 여러개 a1+ : 1이(반드시) 1개 이상 있다.
a(x), a1(o), a11(o)
{n} => 딱 nro dlTek. a{3} : a가 딱 3개 있음 aa(x) aaa(o) aaaa(x)
{n,m} => n개 이상 m개 이하 a{3,6} : a가 3개 이상 5개 이하 있다.
{n,} n개 이상 a{2,} : a가 2개 이상 있다.

=========================================================================
숫자          ^[0-9]*$
영문자         ^[a-zA-Z}*$
한글          ^[가-하]*$
E-Mail       \\w+@\\w+\\.\\w+(\\.\\w+)?
전화번호       ^\d{2,3}-\d{3,4}-\d{4}$
휴대전화번호    ^01(?:0|1|[6-9])-(?:\d{3} | \d{4})-\d{4}$
주민등록번호    \d{6}\-[1-4]\d{6}
우편번호       ^/d{3}-\d{2}$
===========================================================================
정규식 그룹 캡쳐 기호
()그룹
(?:) 칮지만 그룹에 포함 안됨
(?=) = 앞문자를 기준으로 전방 탐색
(?<=) =뒷문자를 기준으로 후방 탐색

===========================================================================
리플렉션(Reflection)
-자바의 Class 클래스 (java.lang.Class)
-애플리케이션 실행 중 클래스를 동적으로 불러와 다루어야 할 경우 클래스의 정보를 얻을 때 사용하는 클래스





